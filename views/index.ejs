<!DOCTYPE html>
<html>
    <head>
        <title>Gender source detector and fixer</title>
        <link rel="stylesheet" type="text/css" href="/css/style.css">
    </head>
<body>
    <h1>Gender source detector and fixer</h1>
    <div id="container">
        <div id="content">
            <form id="text_form">
                <h2>Text input</h2>
                <div class="form-field">
                    <label for="article_text">Enter some article text to see which additional sources are quoted. These do not include the main newsmakers or subjects of the story. Please keep your input to a maximum of 1000 words:</label>

                    <textarea id="article_text" name="article_text" oninput="countWords(this, document.getElementById('wordCount'))"></textarea>
                </div>
                <p>Word count: <span id="wordCount" style="color: black;">0</span>/1000</p>

                <div class="form-field" id ="form-buttons">
                    <button id="analyse-button" type="button" onclick="analyseArticle()">Analyse</button>
                    <button id="reset-button" type="button" onclick="resetArticle()">Reset</button>
                </div>
            
            </form>
            <div id="results">
                <h2>Results</h2>
                <div id="recommendations">
                    <div id="results_statement" style="display: none;"></div>
                    <div id="job_links" style="display: none;"></div>
                </div>
                <div id="loading-spinner" style="display: none;">
                    <img src="/images/loading.gif" alt="Loading...">
                </div>
                <div id="results_data">

                </div>
            </div>
            
            <!-- Modal for profile recommendations -->
            <div id="myModal" class="modal">
                <!-- Modal content -->
                <div class="modal-content">
                    <span class="close">&times;</span>
                    <p id="modal_body"></p>
                </div>
            </div>
        </div>
    </div>  

    <script>
    
        // Set the buttons as disabled if textbox is blank
        document.addEventListener("DOMContentLoaded", function() {
            const analyseButton = document.getElementById('analyse-button');
            const resetButton = document.getElementById('reset-button');
            const articleText = document.getElementById('article_text');

            // Disable the buttons if textarea is empty
            analyseButton.disabled = !articleText.value.trim();
            resetButton.disabled = !articleText.value.trim();
        });

        // Add an event listener to the textarea to enable/disable the buttons based on wether there is input text
        document.getElementById('article_text').addEventListener('input', function() {
                const analyseButton = document.getElementById('analyse-button');
                const resetButton = document.getElementById('reset-button');

                // The "Analyse" button is disabled when the textarea is empty
                analyseButton.disabled = !this.value.trim();
                resetButton.disabled = !this.value.trim();
        });

        // Function to reset the text box if "reset" button is clicked
        function resetArticle() {
            // Clear the text area
            document.getElementById('article_text').value = '';

            // Clear the word count
            document.getElementById('wordCount').textContent = '0';

            // Clear the results
            document.getElementById('results_data').innerHTML = '';
            document.getElementById('results_statement').style.display = 'none';
            document.getElementById('results_statement').style.backgroundColor = '#FFCD91';
            document.getElementById('results_statement').innerHTML = '';
            document.getElementById('job_links').style.display = 'none';
            document.getElementById('job_links').innerHTML = '';
            
            // Re-enable the analyse button
            document.getElementById('analyse-button').disabled = false;
            document.getElementById('analyse-button').style.display = 'block';
            
            // Hide the loading spinner
            document.getElementById('loading-spinner').style.display = 'none';
        }

        // Function for word counter
        function countWords(textarea, display) {
            let text = textarea.value;
            let words = text.split(/\s+/).filter(function(word) { return word.length > 0; }); // split by spaces and remove empty words
            display.textContent = words.length;
            if (words.length > 1000) {
                words = words.slice(0, 1000); // limit words array to 1000 elements
                textarea.value = words.join(' '); // update textarea value with limited words
                display.textContent = words.length;
                display.style.color = 'red';
            } else {
                display.style.color = 'black';
            }
        }

        // Function to make sure percentages don't have trailing decimals
        function formatPercentage(num) {
            return num % 1 === 0 ? Math.floor(num) : num.toFixed(2);
        }

        // Function to analyse the article
        function analyseArticle() {
            const resultsDiv = document.getElementById('results_data');
            resultsDiv.innerHTML = ''; // Clear the previous results, if any

            // Get elements that we need to toggle display properties of
            const loadingSpinner = document.getElementById('loading-spinner');
            const analyseButton = document.getElementById('analyse-button');
            const resultsStatementDiv = document.getElementById('results_statement');
            const jobLinksDiv = document.getElementById('job_links');

            resultsStatementDiv.style.display = 'none'; // Hide the previous results statement, if any
            jobLinksDiv.style.display = 'none'; // Hide the job links, if any

            // Set the initial state of the button
            analyseButton.disabled = true;

            // Display the loading spinner
            loadingSpinner.style.display = 'block';

            const article_text = document.getElementById('article_text').value;

            if (!article_text.trim()) {
                alert('Please enter some article text to analyse.');
                return;
            }

            fetch('/detect', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ article_text: article_text })
            })
            .then(response => {
                    if (!response.ok) { throw response }
                    return response.json()  //we only get here if there is no error
                })
            .then(data => {
                let resultsHTML = '';

                // Count the gender distribution
                let maleCount = 0;
                let femaleCount = 0;
                let unknownCount = 0;
                for (let person of data) {
                    if (person.gender.toLowerCase() === 'male') {
                                maleCount++;
                        } else if (person.gender.toLowerCase() === 'female') {
                            femaleCount++;
                        } else {
                            unknownCount++;
                        }
                }
                const totalCount = maleCount + femaleCount + unknownCount;

                // Calculate the percentages
                const malePercentage = formatPercentage((maleCount / totalCount) * 100);
                const femalePercentage = formatPercentage((femaleCount / totalCount) * 100);
                const unknownPercentage = formatPercentage((unknownCount / totalCount) * 100);


                // Generate and show results statement
                resultsStatementDiv.style.display = 'block';

                if (data.length === 0) {
                        resultsStatementDiv.innerHTML = "There were no sources detected in the text, or the only sources quoted are the main newsmaker(s) or subject(s) of the story. If you think this is wrong, please click on the 'Reset' button and try again.";
                        resultsStatementDiv.style.backgroundColor = "#F4D4D5";
                } else {

                    let minorityGender, majorityGender;

                    if (malePercentage > femalePercentage) {
                        minorityGender = 'female';
                        majorityGender = 'male';
                        resultsStatementDiv.textContent = "There are more men than women quoted in your story.";
                        resultsStatementDiv.style.backgroundColor = '#FFCD91'; 
                    } else if (malePercentage === femalePercentage) {
                        resultsStatementDiv.textContent = "There is a perfect balance of men and women quoted in your story. Great job!";
                        resultsStatementDiv.style.backgroundColor = "#A4D1A2";
                    } else {
                        minorityGender = 'male';
                        majorityGender = 'female';
                        resultsStatementDiv.textContent = "There are more women than men quoted in your story.";
                        resultsStatementDiv.style.backgroundColor = '#FFCD91'; // Reset background colour to orange
                    }

                    if (majorityGender != null) {
                        
                        const majorityJobs = [];

                        for (let person of data) {
                            if (person.gender.toLowerCase() === majorityGender && person.linkedin === 'yes') {
                                majorityJobs.push(person.role);
                            }
                        }

                        jobLinksDiv.style.display = 'block';

                        const modal = document.getElementById('myModal');
                        const modalBody = document.getElementById('modal_body');
                        const closeModal = document.getElementsByClassName('close')[0];

                        // When the user clicks on <span> (x), close the modal
                        closeModal.onclick = function() {
                            modal.style.display = 'none';
                        }

                        // When the user clicks anywhere outside of the modal, close it
                        window.onclick = function(event) {
                            if (event.target == modal) {
                                modal.style.display = 'none';
                            }
                        }

                        if (majorityJobs.length != 0) {
                            jobLinksDiv.innerHTML = `<p>You might want to consider including more ${minorityGender} voices, or looking for alternative ${minorityGender} sources for some of the following roles (click on each item to see suggested UK-based leads):</p>`;

                            const ul = document.createElement('ul');

                            for (let job of majorityJobs) {
                                const li = document.createElement('li');
                                const jobLink = document.createElement('a');
                                jobLink.href = '#';
                                jobLink.textContent = job;
                                jobLink.style.textDecoration = "none";
                                jobLink.style.color = "#f44336";
                                jobLink.style.cursor = "pointer";
                                jobLink.addEventListener('click', (event) => {
                                    loadingSpinner.style.display = 'block'; // Show loading gif
                                    event.preventDefault();
                                    fetch('/scrape', {
                                        method: 'POST',
                                        headers: { 'Content-Type': 'application/json' },
                                        body: JSON.stringify({ job_title: encodeURIComponent(job), minority_gender: minorityGender })
                                    }).then((response) => {
                                        if (response.ok) {
                                            return response.text();
                                        }
                                    }).then((html) => {
                                        modalBody.innerHTML = html;  // Populate modal with the HTML
                                        loadingSpinner.style.display = 'none'; // Hide loading gif
                                        modal.style.display = 'block';  // Show the modal
                                    });
                            });
                            li.appendChild(jobLink);
                            ul.appendChild(li);
                            }
                            jobLinksDiv.appendChild(ul);
                        } else {
                            jobLinksDiv.innerHTML = `<p>You might want to consider including more ${minorityGender} voices.</p>`
                        }
                    
                    }

                    // Presentation of results for sources

                    resultsHTML += '<h3>Sources quoted</h3>';
                    resultsHTML += '<table class = "source-table"><tr><th>Source</th><th>Gender</th><th>Role</th><th>Quotes</th></tr>';

                    for (let person of data) {
                        resultsHTML += `<tr>
                            <td>${person.name}</td>
                            <td>${person.gender}</td>
                            <td>${person.role}</td>
                            <td>${person.quotes}</td>
                        </tr>`;
                    }
                    resultsHTML += '</table>';

                    // Append the gender calculation to the table
                    resultsHTML += '<h3>Breakdown of gender</h3>';
                    resultsHTML += `<table class="gender-table">
                            <tr>
                                <th>Gender</th>
                                <th>Count</th>
                                <th>Percentage</th>
                            </tr>
                            <tr>
                                <td>Male</td>
                                <td>${maleCount}</td>
                                <td>${malePercentage}%</td>
                            </tr>
                            <tr>
                                <td>Female</td>
                                <td>${femaleCount}</td>
                                <td>${femalePercentage}%</td>
                            </tr>
                            <tr>
                                <td>Unknown</td>
                                <td>${unknownCount}</td>
                                <td>${unknownPercentage}%</td>
                            </tr>
                        </table>`;
                    
                        // Insert the HTML into the results div
                        resultsDiv.innerHTML = resultsHTML;
                    }

            // Hide the loading spinner and enable the analyse button again
            analyseButton.disabled = true;
            loadingSpinner.style.display = 'none';
        
        })
        .catch(error => {
                console.error('Error:', error);
                
                // Hide the loading spinner and enable the analyse button in case of an error
                loadingSpinner.style.display = 'none';
                analyseButton.disabled = true;;
            });
        };

    // Add the event listener to the "Analyse" button
    document.getElementById('analyse-button').addEventListener('click', function() {
        analyseArticle();
    });

    </script>
</body>
</html>
