<!DOCTYPE html>
<html>
    <head>
        <title>Gender source detector and fixer</title>
        <link rel="stylesheet" type="text/css" href="/css/style.css">
    </head>
<body>
    <h1>Gender source detector and fixer</h1>
    <div id="container">
        <form id="text_form" action="/detect" method="post">
            <label for="article_text">Enter some article text to see which additional sources are quoted. These do not include the main newsmakers or subjects of the story. Please keep your input to a maximum of 1000 words:</label>
            <textarea id="article_text" name="article_text" oninput="countWords(this, document.getElementById('wordCount'))"></textarea>
            <p>Word count: <span id="wordCount" style="color: black;">0</span>/1000</p>
            <div id="loading-spinner" style="display: none;">
                <img src="/images/loading.gif" alt="Loading...">
            </div>
            <input id="analyse-button" type="submit" value="Analyse article">
        </form>


    </div>  

        <!-- Modal dialog for displaying results -->
        <div id="myModal" class="modal">
            <div class="modal-content">
                <h2>Sources quoted</h2>
                <div id="modal-results"></div>
                <div id="job_links"></div>
                <div class="modal-close">
                    <button onclick="closeModal()">Close</button>
                </div>
            </div>
        </div>

    <script>
    
        // Function for word counter
        function countWords(textarea, display) {
            let text = textarea.value;
            let words = text.split(/\s+/).filter(function(word) { return word.length > 0; }); // split by spaces and remove empty words
            display.textContent = words.length;
            if (words.length > 1000) {
                words = words.slice(0, 1000); // limit words array to 1000 elements
                textarea.value = words.join(' '); // update textarea value with limited words
                display.textContent = words.length;
                display.style.color = 'red';
            } else {
                display.style.color = 'black';
            }
        }

        //Processing article text and returning results on page

        document.getElementById('text_form').addEventListener('submit', function(event) {
        event.preventDefault();

        // Get the loading spinner
        const loadingSpinner = document.getElementById('loading-spinner');

        // Get the button
        const analyseButton = document.getElementById('analyse-button');

        // Hide the button and display the loading spinner
        analyseButton.style.display = 'none';
        loadingSpinner.style.display = 'block';

        const article_text = document.getElementById('article_text').value;

        fetch('/detect', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ article_text: article_text })
        })
        .then(response => {
                if (!response.ok) { throw response }
                return response.json()  //we only get here if there is no error
            })
        .then(data => {
            let tableHTML = '<table class = "source-table"><tr><th>Source</th><th>Gender</th><th>Role</th></tr>';
                let maleCount = 0;
                let femaleCount = 0;
                let unknownCount = 0;

            // Presentation of results for sources

            for (let person of data) {
                tableHTML += `<tr>
                    <td>${person.name}</td>
                    <td>${person.gender}</td>
                    <td>${person.role}</td>
                </tr>`;

                // Count the gender distribution
                if (person.gender.toLowerCase() === 'male') {
                        maleCount++;
                } else if (person.gender.toLowerCase() === 'female') {
                    femaleCount++;
                } else {
                    unknownCount++;
                }
            }
            tableHTML += '</table>';

            const totalCount = maleCount + femaleCount + unknownCount;

            // Calculate the percentages
            const malePercentage = ((maleCount / totalCount) * 100).toFixed(2);
            const femalePercentage = ((femaleCount / totalCount) * 100).toFixed(2);
            const unknownPercentage = ((unknownCount / totalCount) * 100).toFixed(2);

            // Append the gender calculation to the table
            tableHTML += '<h2>Breakdown of gender</h2>'
            tableHTML += `<table class="gender-table">
                    <tr>
                        <th>Gender</th>
                        <th>Count</th>
                        <th>Percentage</th>
                    </tr>
                    <tr>
                        <td>Male</td>
                        <td>${maleCount}</td>
                        <td>${malePercentage}%</td>
                    </tr>
                    <tr>
                        <td>Female</td>
                        <td>${femaleCount}</td>
                        <td>${femalePercentage}%</td>
                    </tr>
                    <tr>
                        <td>Unknown</td>
                        <td>${unknownCount}</td>
                        <td>${unknownPercentage}%</td>
                    </tr>
                </table>`;
            
            // Hide the loading spinner and show the analyse button again
            analyseButton.style.display = 'block';
            loadingSpinner.style.display = 'none';
            
            let minorityGender, majorityGender;

            if (malePercentage > femalePercentage) {
                minorityGender = 'female';
                majorityGender = 'male';
                tableHTML += `<div id="gender_balance">There are <b>more men than women</b> quoted as additional sources in your story. You might want to consider looking for alternative sources for some of the following roles:</div>`
            } else if (malePercentage === femalePercentage) {
                tableHTML += `<div id="gender_balance" style="background-color: #A4D1A2">There is a perfect balance of men and women quoted as additional sources in your story. Good job!</div>`
            } else {
                minorityGender = 'male';
                majorityGender = 'female';
                tableHTML += `<div id="gender_balance">There are <b>more women than men</b> quoted as additional sources in your story. You might want to consider looking for alternative sources for some of the following roles:</div>`
            }

            const jobLinksDiv = document.getElementById('job_links');
            jobLinksDiv.innerHTML = '';

            const majorityJobs = [];

            for (let person of data) {
                if (person.gender.toLowerCase() === majorityGender) {
                    majorityJobs.push(person.role);
                }
            }

            const ul = document.createElement('ul');

            for (let job of majorityJobs) {
            const jobLink = document.createElement('a');
            jobLink.href = '#';
            jobLink.textContent = job;
            jobLink.addEventListener('click', (event) => {
                event.preventDefault();
                fetch('/scrape', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ job_title: encodeURIComponent(job), minority_gender: minorityGender })
                }).then((response) => {
                    if (response.ok) {
                        return response.text();
                    }
                }).then((html) => {
                    document.open();
                    document.write(html);
                    document.close();
                });
            });

            const li = document.createElement('li');
            li.appendChild(jobLink);
            ul.appendChild(li);
            }

            jobLinksDiv.appendChild(ul);

            // Display the results in a modal
            openModal(tableHTML);
        })
        .catch(error => {
                console.error('Error:', error);
                
                // Hide the loading spinner and show the analyse button in case of an error
                loadingSpinner.style.display = 'none';
                analyseButton.style.display = 'block';
            });
        });

        // Function to open the modal and display the results
        function openModal(content) {
            const modal = document.getElementById('myModal');
            const modalContent = document.getElementById('modal-results');
            modalContent.innerHTML = content;
            modal.style.display = 'block';
        }

        // Function to close the modal
        function closeModal() {
            const modal = document.getElementById('myModal');
            modal.style.display = 'none';
        }

    </script>
</body>
</html>
